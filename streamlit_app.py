import streamlit as st 
import pandas as pd
import xgboost as xgb
import pickle
import numpy as np
from sklearn.preprocessing import LabelEncoder # Needed to inverse transform predictions
import random
from numpy.random import default_rng as rng
import matplotlib.pyplot as plt
import seaborn as sns

#######################################
# PAGE SETUP
#######################################

st.set_page_config(page_title="Sales Dashboard", page_icon=":bar_chart:", layout="wide")

with open('style2.css') as f:
   st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

# st.title("Gest√£o do Projeto XYZ")

#######################################
# STREAMLIT LAYOUT
#######################################

Titlebar, = st.columns(1)
Line1L,Line1R = st.columns([0.7,0.3])
Line2L,Line2R = st.columns(2)
top_left_column, top_right_column = st.columns([0.7,0.3])
bottom_left_column, bottom_right_column = st.columns(2)

with Titlebar:
    # ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    st.markdown("<h1 style='text-align: center;'>‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏£‡∏Ñ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á‡πÉ‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</h1>", unsafe_allow_html=True)
    st.markdown("<p style='text-align: center;'>This is some centered paragraph text.</p>", unsafe_allow_html=True)

with Line1L:
    st.subheader("Home")
    st.write("Health Risk Predictor \n This application predicts health risk scores based \n on user-entered information.")

    st.title("Summary Report: Simulated Diabetes Data")
    st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î 3 ‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà ‡∏õ‡∏Å‡∏ï‡∏¥, ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á, ‡πÅ‡∏•‡∏∞‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏õ‡πà‡∏ß‡∏¢")

    # Upload or load the data
    @st.cache_data
    def load_data():
        return pd.read_csv("Diabetes_Risk_Data.csv")

    df = load_data()

    st.subheader("üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.dataframe(df.head(10))

    # Basic stats
    st.subheader("üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ä‡∏¥‡∏á‡∏û‡∏£‡∏£‡∏ì‡∏ô‡∏≤ (Descriptive Statistics)")
    st.write(df.describe())

    # Correlation heatmap
    st.subheader("üìå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ (Correlation Matrix)")
    numeric_cols = df.select_dtypes(include=['float64', 'int64'])
    corr = numeric_cols.corr()

    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(corr, annot=True, fmt=".2f", cmap="coolwarm", ax=ax)
    st.pyplot(fig)

    # Distribution plots
    st.subheader("üìä Distribution ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç")
    col_to_plot = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£:", numeric_cols.columns)
    fig2, ax2 = plt.subplots()
    sns.histplot(df[col_to_plot], kde=True, bins=30, ax=ax2)
    st.pyplot(fig2)

    # DM Status vs selected feature
    st.subheader("üìå ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡∏∑‡πà‡∏ô")
    compare_feature = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (DM_Status):", numeric_cols.columns)
    fig3, ax3 = plt.subplots()
    sns.boxplot(x='DM', y=compare_feature, data=df, ax=ax3)
    st.pyplot(fig3)

    # Footer
    st.info("üí° ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning ‡∏´‡∏£‡∏∑‡∏≠‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• XGBoost ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")


    st.progress(50, text="Progresso")

    column_1, column_2, column_3, column_4 = st.columns(4)

    with column_1:
        st.metric(label="Temperature", value="70 ¬∞F", delta="1.2 ¬∞F")

    with column_2:
        st.metric(label="Temperature", value="70 ¬∞F", delta="1.2 ¬∞F")

    with column_3:
        st.metric(label="Temperature", value="70 ¬∞F", delta="-1.2 ¬∞F")
        
    with column_4:
        st.metric(label="Encerramento", value="40")
       
    st.subheader("Home")
    df = pd.DataFrame(
        {
            "Name": ["App A", "App B"],
            "Command": ["**st.table**", "*st.dataframe*"],
            "Type": ["`static`", "`interactive`"],
            "Docs": [
                "[:rainbow[docs]](https://docs.streamlit.io/develop/api-reference/data/st.dataframe)",
                "[:open_book:](https://docs.streamlit.io/develop/api-reference/data/st.table)",
            ]
        }
    )

    st.dataframe(
        df,
        column_config={
            "Name": "App name",
            "Command": "Github Stars",
            "Type": "App URL",
            "Docs": "Views (past 30 days)"
        },
        hide_index=True,
    )

    st.subheader("Sales Overview")
    st.write("Prediction Result Low Risk Probability: 0.15 Advice Your risk level is low, maintain a healthy ifestyle to keep it that way.")

    st.subheader("Sales Overview")
    st.write("This section provides an overview of sales performance.")

with Line1R:
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
    @st.cache_resource # Using st.cache_resource as recommended
    def load_model():
        try:
            with open("xgboost_dm_model.pkl", "rb") as f:
                model = pickle.load(f)
            return model
        except FileNotFoundError:
            st.error("Model file 'xgboost_dm_model.pkl' not found. Please train the model first.")
            return None

    # ‡πÇ‡∏´‡∏•‡∏î LabelEncoder ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á mapping ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏•‡∏±‡∏ö
    # ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏•‡∏•‡πå 0nWeTsnKDoQs, y_mapped ‡∏Ñ‡∏∑‡∏≠: ‡∏õ‡∏Å‡∏ï‡∏¥=0, ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á=1, ‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏õ‡πà‡∏ß‡∏¢=2
    # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á mapping dictionary ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö
    prediction_labels = {
        0: '‡∏õ‡∏Å‡∏ï‡∏¥',
        1: '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
        2: '‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏õ‡πà‡∏ß‡∏¢'
    }

    model = load_model()

    if model:
        # ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        st.subheader("Risk Assessment Form")
        st.write("‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô (DM)")

        # Create input form - Ensure input names match the features used for training
        # Based on X_cleaned columns from cell 0nWeTsnKDoQs:
        # 'age', 'sex', 'bmi', 'waist', 'systolic_bp', 'diastolic_bp', 'cholesterol'
        age_input = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)", min_value=1, max_value=120, value=50)
        # sex was encoded as 0 for ‡∏ä‡∏≤‡∏¢, 1 for ‡∏´‡∏ç‡∏¥‡∏á in cell 0nWeTsnKDoQs
        sex_input_option = st.selectbox("‡πÄ‡∏û‡∏®", ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á"])
        sex_encoded = 0 if sex_input_option == "‡∏ä‡∏≤‡∏¢" else 1 # Encode sex input
        bmi_input = st.number_input("‡∏Ñ‡πà‡∏≤‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (BMI)", min_value=10.0, max_value=50.0, value=25.0)
        waist_input = st.number_input("‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß (cm)", min_value=30, max_value=200, value=85)
        systolic_bp_input = st.number_input("‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏ï‡∏±‡∏ß‡∏ö‡∏ô (Systolic)", min_value=80, max_value=250, value=130)
        diastolic_bp_input = st.number_input("‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á (Diastolic)", min_value=40, max_value=150, value=80) # Assuming diastolic_bp was also a feature
        cholesterol_input = st.number_input("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏£‡∏ß‡∏° (Cholesterol)", min_value=100, max_value=400, value=180)
        # Note: 'glucose' was dropped in cell 0nWeTsnKDoQs before training the multi-class model.
        # If you need to include glucose, you'll need to retrain the model with it.

        # Create a DataFrame with the exact column names as the training data.
        # These column names are based on X_cleaned from cell 0nWeTsnKDoQs.
        user_input_dict = {
            'age': age_input,
            'sex': sex_encoded,
            'bmi': bmi_input,
            'waist': waist_input,
            'systolic_bp': systolic_bp_input,
            'diastolic_bp': diastolic_bp_input,
            'cholesterol': cholesterol_input
        }

        user_input_df = pd.DataFrame([user_input_dict])

        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        if st.button("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"):
            # Ensure the order of columns in user_input_df matches the training data
            # Get feature names from the trained model if possible, or rely on the known training features
            # model.feature_names_in_ can be used in newer XGBoost versions
            # For compatibility, we'll rely on the known training features from cell 0nWeTsnKDoQs
            # training_feature_names = ['age', 'sex', 'bmi', 'waist', 'systolic_bp', 'diastolic_bp', 'cholesterol']

            # Ensure the columns in user_input_df are in the correct order as expected by the model
            # This requires knowing the exact order the model was trained on.
            # A safer approach is to save the feature names during training.
            # For now, we rely on the order observed in X_cleaned from cell 0nWeTsnKDoQs.
            try:
                # Attempt to get feature names from the model (works in newer XGBoost versions)
                if hasattr(model, 'feature_names_in_') and model.feature_names_in_ is not None:
                    expected_features = model.feature_names_in_
                else:
                    # Fallback to the manually defined training_feature_names if not available
                    # Ensure this matches the exact order from training!
                    expected_features = ['age', 'sex', 'bmi', 'waist', 'systolic_bp', 'diastolic_bp', 'cholesterol'] # Manually confirmed order

                user_input_ordered = user_input_df[expected_features]

                pred_encoded = model.predict(user_input_ordered)[0]
                prob_all_classes = model.predict_proba(user_input_ordered)[0] # Probabilities for all classes

                # Convert encoded prediction back to original label
                predicted_label = prediction_labels.get(pred_encoded, f"Unknown encoded label: {pred_encoded}")

                st.write(f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: **{predicted_label}**")
                # Optionally display probabilities for all classes
                st.write("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏•‡∏≤‡∏™:")
                for class_id, prob in enumerate(prob_all_classes):
                    label = prediction_labels.get(class_id, f"Class {class_id}")
                    st.write(f"- {label}: {prob:.2f}")


            except KeyError as e:
                st.error(f"Feature mismatch: {e}. Ensure input columns match model training features.")
            except Exception as e:
                st.error(f"An error occurred during prediction: {e}")
        st.write("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢")

    else:
        st.write("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")


